1. Estructura de datos.

2. Solucion inicial    -> 2 estrategias    -> pensar coste y como de buena es.

3. Operadores   (tener en cuenta factor de ramificacion):
ESQUEMA:
- Tendremos unas gasolineras y unos centros de distribucion
- Necesitamos una funcion y un esquema de datos que permita saber/simular:
    - A donde va cada camion (los viajes) --> - Operador super basico (1 camion va a un punto; Gasolineras/CentrosDistribucion --> Coger una peticion)
                                              - Operador basico (1 camion hace un viaje; Va a los puntos que deba ir siendo el ultimo el centro de donde ha salido)

    - Gestionar que peticiones ya se han completado en cada iteracion para decidir cuales hacer en la siguiente
    - Crear (Como minimo 2 diferentes) las logicas que deciden en que orden se cogen las peticiones
    --> Crear solucion/es inicial/es que respeten las restricciones

CREAR SUCESORES
IDEAS:
- Operador Interpolacion Pequena (Si cada iteracion se calcula un viaje entero no sirve. Si en una iteracion se decide un destino, cambiar el orden en el que un camion visita las gasolineras en un viaje puede crear nuevas variaciones ya que abre la puerta a que en la siguiente itereacion se asigne esa peticion a otro camion que llegue mejor)
- Operador Interpolacion Grande (Cambia el orden en el que hace los viajes, , esto puede crear nuevas ya que abre la puerta a que en la siguiente itereacion se asigne una de esas peticiones a otro camion que llegue mejor)
- Operador Cambio de Rutas (Podemos cambiar una gasolinera de un viaje, si tenemos ya los viajes que se han hecho, y arrastrar ese cambio a los demas)

IDEAS DEL COPILOT:

Operadores recomendados para Hill Climbing:

    1. Reasignar una petici√≥n a otro cami√≥n ‚úÖ (B√ÅSICO - empieza por este)
    Tomas una petici√≥n asignada al cami√≥n A y la reasignas al cami√≥n B
    Por qu√© funciona: puede encontrar un cami√≥n m√°s cercano o con mejor ruta
    Implementaci√≥n: selecciona petici√≥n aleatoria ‚Üí prueba asignarla a otro cami√≥n

    2. Intercambiar dos peticiones entre camiones ‚úÖ (B√ÅSICO)
    Cami√≥n A tiene petici√≥n P1, cami√≥n B tiene P2 ‚Üí las intercambias
    Por qu√© funciona: puede optimizar rutas cuando dos camiones tienen peticiones "cruzadas"
    Implementaci√≥n: selecciona 2 peticiones de camiones diferentes ‚Üí interc√°mbialas

    3. Cambiar el orden de visita dentro de un viaje ‚úÖ (IMPORTANTE)
    Un viaje tiene 2 gasolineras [G1, G2] ‚Üí lo cambias a [G2, G1]
    Por qu√© funciona: el orden afecta la distancia total (centro ‚Üí G1 ‚Üí G2 ‚Üí centro vs centro ‚Üí G2 ‚Üí G1 ‚Üí centro)
    Implementaci√≥n: selecciona un viaje ‚Üí invierte el orden de sus paradas

    4. Mover una petici√≥n a otro viaje del mismo cami√≥n ‚úÖ
    El cami√≥n tiene Viaje1[P1, P2] y Viaje2[P3] ‚Üí mueves P2 a Viaje2 quedando Viaje1[P1] y Viaje2[P3, P2]
    Por qu√© funciona: puede redistribuir mejor la carga entre viajes
    Validaci√≥n necesaria: que no se exceda v viajes ni k km

    5. Fusionar dos viajes de un cami√≥n üí° (AVANZADO)
    Si un cami√≥n tiene Viaje1[P1] y Viaje2[P2] ‚Üí los fusiona en Viaje1[P1, P2] (elimina Viaje2)
    Por qu√© funciona: reduce el n√∫mero de viajes (ahorra distancia de ida/vuelta al centro)
    Validaci√≥n: que las 2 peticiones quepan en un viaje (m√°ximo 2 dep√≥sitos)

    6. Dividir un viaje en dos üí° (AVANZADO)
    Viaje1[P1, P2] ‚Üí Viaje1[P1] y Viaje2[P2]
    Por qu√© funciona: a veces conviene hacer viajes individuales si optimiza otras restricciones
    Validaci√≥n: que no se exceda el l√≠mite v de viajes

    7. Swap de peticiones dentro del mismo viaje ‚≠ê (MUY √öTIL)
    Similar al operador 3, pero pensado espec√≠ficamente para el orden
    Si visitas [Gasolinera5, Gasolinera3] ‚Üí prueba [Gasolinera3, Gasolinera5]


Mi recomendaci√≥n para empezar (orden de implementaci√≥n)
    Fase 1 - Operadores b√°sicos (implementa estos primero):
        Reasignar petici√≥n a otro cami√≥n (operador 1)
        Intercambiar orden dentro de un viaje (operador 3)
        Intercambiar peticiones entre camiones (operador 2)

    Fase 2 - Si funciona bien, a√±ade:
        Mover petici√≥n entre viajes del mismo cami√≥n (operador 4)
        Fusionar viajes (operador 5)